{"name": "test_cart", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.TargetClosedError: Page.goto: Target page, context or browser has been closed\nCall log:\n  - navigating to \"https://automationexercise.com/\", waiting until \"load\"", "trace": "request = <SubRequest 'browser_setup' for <Coroutine test_cart>>, kwargs = {}, func = <function browser_setup at 0x0000016CE35F1440>\nevent_loop_fixture_id = 'event_loop'\nsetup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x0000016CE36B7C40>\nsetup_task = <Task finished name='Task-8' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, de...t or browser has been closed\\nCall log:\\n  - navigating to \"https://automationexercise.com/\", waiting until \"load\"\\n')>\n\n    @functools.wraps(fixture)\n    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):\n        func = _perhaps_rebind_fixture_func(fixture, request.instance)\n        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(\n            request, func\n        )\n        event_loop = request.getfixturevalue(event_loop_fixture_id)\n        kwargs.pop(event_loop_fixture_id, None)\n        gen_obj = func(**_add_kwargs(func, kwargs, event_loop, request))\n    \n        async def setup():\n            res = await gen_obj.__anext__()  # type: ignore[union-attr]\n            return res\n    \n        context = contextvars.copy_context()\n        setup_task = _create_task_in_context(event_loop, setup(), context)\n>       result = event_loop.run_until_complete(setup_task)\n\n.venv\\Lib\\site-packages\\pytest_asyncio\\plugin.py:329: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\asyncio\\base_events.py:664: in run_until_complete\n    return future.result()\n.venv\\Lib\\site-packages\\pytest_asyncio\\plugin.py:324: in setup\n    res = await gen_obj.__anext__()  # type: ignore[union-attr]\nconftest.py:12: in browser_setup\n    await page.goto(base_url, timeout= 100*600)\n.venv\\Lib\\site-packages\\playwright\\async_api\\_generated.py:8973: in goto\n    await self._impl_obj.goto(\n.venv\\Lib\\site-packages\\playwright\\_impl\\_page.py:551: in goto\n    return await self._main_frame.goto(**locals_to_params(locals()))\n.venv\\Lib\\site-packages\\playwright\\_impl\\_frame.py:145: in goto\n    await self._channel.send(\"goto\", locals_to_params(locals()))\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x0000016CE3A27BF0>, cb = <function Channel.send.<locals>.<lambda> at 0x0000016CE3ABAA20>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TargetClosedError: Page.goto: Target page, context or browser has been closed\nE           Call log:\nE             - navigating to \"https://automationexercise.com/\", waiting until \"load\"\n\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TargetClosedError"}, "start": 1737029752917, "stop": 1737029752917, "uuid": "239fd4f8-66bc-4854-b9a6-aeb9f76ccffa", "historyId": "6d85da908c3f27f0f320736f042783c0", "testCaseId": "6d85da908c3f27f0f320736f042783c0", "fullName": "pom.tests.test_all.TestAll#test_cart", "labels": [{"name": "story", "value": "Add and remove items from the cart, checkout and make payment"}, {"name": "feature", "value": "Cart Operations"}, {"name": "tag", "value": "asyncio"}, {"name": "parentSuite", "value": "pom.tests"}, {"name": "suite", "value": "test_all"}, {"name": "subSuite", "value": "TestAll"}, {"name": "host", "value": "Asus15"}, {"name": "thread", "value": "8368-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "pom.tests.test_all"}]}